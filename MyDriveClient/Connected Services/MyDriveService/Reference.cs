//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyDriveClient.MyDriveService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/MyDriveService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyDriveClient.MyDriveService.Roles RoleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyDriveClient.MyDriveService.Roles Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Roles", Namespace="http://schemas.datacontract.org/2004/07/MyDriveService")]
    public enum Roles : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        trial = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        simple = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        maximum = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnswerCode", Namespace="http://schemas.datacontract.org/2004/07/MyDriveService")]
    public enum AnswerCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Complete = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnswerResponse", Namespace="http://schemas.datacontract.org/2004/07/MyDriveService")]
    [System.SerializableAttribute()]
    public partial class AnswerResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyDriveClient.MyDriveService.AnswerCode CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyDriveClient.MyDriveService.StorageFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyDriveClient.MyDriveService.AnswerCode Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyDriveClient.MyDriveService.StorageFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageFile", Namespace="http://schemas.datacontract.org/2004/07/MyDriveService")]
    [System.SerializableAttribute()]
    public partial class StorageFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyDriveService.IAccessService")]
    public interface IAccessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/UserRegistration", ReplyAction="http://tempuri.org/IAccessService/UserRegistrationResponse")]
        MyDriveClient.MyDriveService.AnswerCode UserRegistration(MyDriveClient.MyDriveService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/UserRegistration", ReplyAction="http://tempuri.org/IAccessService/UserRegistrationResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerCode> UserRegistrationAsync(MyDriveClient.MyDriveService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/UserAuth", ReplyAction="http://tempuri.org/IAccessService/UserAuthResponse")]
        MyDriveClient.MyDriveService.AnswerCode UserAuth(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessService/UserAuth", ReplyAction="http://tempuri.org/IAccessService/UserAuthResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerCode> UserAuthAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccessServiceChannel : MyDriveClient.MyDriveService.IAccessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessServiceClient : System.ServiceModel.ClientBase<MyDriveClient.MyDriveService.IAccessService>, MyDriveClient.MyDriveService.IAccessService {
        
        public AccessServiceClient() {
        }
        
        public AccessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MyDriveClient.MyDriveService.AnswerCode UserRegistration(MyDriveClient.MyDriveService.User user) {
            return base.Channel.UserRegistration(user);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerCode> UserRegistrationAsync(MyDriveClient.MyDriveService.User user) {
            return base.Channel.UserRegistrationAsync(user);
        }
        
        public MyDriveClient.MyDriveService.AnswerCode UserAuth(string login, string password) {
            return base.Channel.UserAuth(login, password);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerCode> UserAuthAsync(string login, string password) {
            return base.Channel.UserAuthAsync(login, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyDriveService.IStorrageService")]
    public interface IStorrageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Create", ReplyAction="http://tempuri.org/IStorrageService/CreateResponse")]
        MyDriveClient.MyDriveService.AnswerResponse Create(byte[] file, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Create", ReplyAction="http://tempuri.org/IStorrageService/CreateResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> CreateAsync(byte[] file, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Delete", ReplyAction="http://tempuri.org/IStorrageService/DeleteResponse")]
        MyDriveClient.MyDriveService.AnswerResponse Delete(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Delete", ReplyAction="http://tempuri.org/IStorrageService/DeleteResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> DeleteAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Update", ReplyAction="http://tempuri.org/IStorrageService/UpdateResponse")]
        MyDriveClient.MyDriveService.AnswerResponse Update(byte[] file, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Update", ReplyAction="http://tempuri.org/IStorrageService/UpdateResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> UpdateAsync(byte[] file, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Read", ReplyAction="http://tempuri.org/IStorrageService/ReadResponse")]
        MyDriveClient.MyDriveService.AnswerResponse Read(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/Read", ReplyAction="http://tempuri.org/IStorrageService/ReadResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> ReadAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/ReadAll", ReplyAction="http://tempuri.org/IStorrageService/ReadAllResponse")]
        MyDriveClient.MyDriveService.AnswerResponse ReadAll(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/ReadAll", ReplyAction="http://tempuri.org/IStorrageService/ReadAllResponse")]
        System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> ReadAllAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/GetFreeSpace", ReplyAction="http://tempuri.org/IStorrageService/GetFreeSpaceResponse")]
        int GetFreeSpace(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/GetFreeSpace", ReplyAction="http://tempuri.org/IStorrageService/GetFreeSpaceResponse")]
        System.Threading.Tasks.Task<int> GetFreeSpaceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/GetAllSpace", ReplyAction="http://tempuri.org/IStorrageService/GetAllSpaceResponse")]
        int GetAllSpace(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStorrageService/GetAllSpace", ReplyAction="http://tempuri.org/IStorrageService/GetAllSpaceResponse")]
        System.Threading.Tasks.Task<int> GetAllSpaceAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStorrageServiceChannel : MyDriveClient.MyDriveService.IStorrageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StorrageServiceClient : System.ServiceModel.ClientBase<MyDriveClient.MyDriveService.IStorrageService>, MyDriveClient.MyDriveService.IStorrageService {
        
        public StorrageServiceClient() {
        }
        
        public StorrageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StorrageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorrageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorrageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MyDriveClient.MyDriveService.AnswerResponse Create(byte[] file, string path) {
            return base.Channel.Create(file, path);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> CreateAsync(byte[] file, string path) {
            return base.Channel.CreateAsync(file, path);
        }
        
        public MyDriveClient.MyDriveService.AnswerResponse Delete(string name) {
            return base.Channel.Delete(name);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> DeleteAsync(string name) {
            return base.Channel.DeleteAsync(name);
        }
        
        public MyDriveClient.MyDriveService.AnswerResponse Update(byte[] file, string path) {
            return base.Channel.Update(file, path);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> UpdateAsync(byte[] file, string path) {
            return base.Channel.UpdateAsync(file, path);
        }
        
        public MyDriveClient.MyDriveService.AnswerResponse Read(string path) {
            return base.Channel.Read(path);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> ReadAsync(string path) {
            return base.Channel.ReadAsync(path);
        }
        
        public MyDriveClient.MyDriveService.AnswerResponse ReadAll(string path) {
            return base.Channel.ReadAll(path);
        }
        
        public System.Threading.Tasks.Task<MyDriveClient.MyDriveService.AnswerResponse> ReadAllAsync(string path) {
            return base.Channel.ReadAllAsync(path);
        }
        
        public int GetFreeSpace(int id) {
            return base.Channel.GetFreeSpace(id);
        }
        
        public System.Threading.Tasks.Task<int> GetFreeSpaceAsync(int id) {
            return base.Channel.GetFreeSpaceAsync(id);
        }
        
        public int GetAllSpace(int id) {
            return base.Channel.GetAllSpace(id);
        }
        
        public System.Threading.Tasks.Task<int> GetAllSpaceAsync(int id) {
            return base.Channel.GetAllSpaceAsync(id);
        }
    }
}
